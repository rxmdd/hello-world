// ***********************************************************************
// <copyright file="AccessRequestsConsumerProvider.cs" company="Microsoft Corporation">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// ***********************************************************************

namespace IDEAs.DataPlatform.AccessControl.AccessRequestsConsumer.Providers
{
    using IDEAs.DataPlatform.AccessControl.CosmosDBLib;
    using IDEAs.DataPlatform.AccessControl.Model;
    using IDEAs.DataPlatform.TorusLibrary.Providers;
    using System.Net.Http;
    using System.Threading.Tasks;

    class AccessRequestsConsumerProvider : IAccessRequestsConsumerProvider
    {
        private readonly CatalogProvider catalogProvider;
        private readonly EligibilityProvider eligibilityProvider;
        private readonly AccessProvider accessProvider;

        public AccessRequestsConsumerProvider()
        {
            this.catalogProvider = CatalogProvider.Instance;
            this.eligibilityProvider = EligibilityProvider.Instance;
            this.accessProvider = AccessProvider.Instance;
        }

        public async Task<HttpResponseMessage> RemoveFromEligibility(AccessRequest accessRequest)
        {
            string eligibilityDefinitionName = this.catalogProvider.GetByIdAsync(accessRequest.CatalogId).Result.TagId;
            return await this.eligibilityProvider.RemoveFromEligibility(accessRequest.ApplicantId, eligibilityDefinitionName);
        }

        public async Task<HttpResponseMessage> AddToEligibility(AccessRequest accessRequest)
        {
            string eligibilityDefinitionName = this.catalogProvider.GetByIdAsync(accessRequest.CatalogId).Result.TagId;
            return await this.eligibilityProvider.AddToEligibility(accessRequest.ApplicantId, eligibilityDefinitionName);
        }

        public async Task UpsertAsync(Access access)
        {
            await this.accessProvider.UpsertAsync(access);
        }

        public async Task DeleteAsync(Access access)
        {
            await this.accessProvider.DeleteAsync(access);
        }

        public async Task<Catalog> GetCatalogAsync(string catalogId)
        {
            return await this.catalogProvider.GetByIdAsync(catalogId);
        }

        public async Task<Access> GetAccessAsync(AccessRequest accessRequest)
        {
            return await this.accessProvider.GetAccessAsync(accessRequest.CatalogId, accessRequest.ApplicantId, accessRequest.AccessType);
        }
    }
}

