// ***********************************************************************
// <copyright file="PermissionRequestsConsumer.cs" company="Microsoft Corporation">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// ***********************************************************************

namespace PermissionRequestsConsumer
{
    using System;
    using System.Threading.Tasks;
    using System.Threading;
    using IDEAs.DataPlatform.AccessControl.Model;
    using IDEAs.DataPlatform.AccessControl.Common.QueueUtility;
    using IDEAs.DataPlatform.AccessControl.PermissionRequestConsumer.Providers;
    using IDEAs.DataPlatform.AccessControl.Common.Logging;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net;
    using System.Configuration;
    using IDEAs.DataPlatform.AccessControl.Common;
    using Newtonsoft.Json;

    public class PermissionRequestsConsumer
    {
        private readonly static IPermissionRequestConsumerProvider consumePermissionRequestProvider = new PermissionRequestConsumerProvider();
        private static ILogger logger;

        public static void Main(string[] args)
        {
            string keyVaultName = ConfigurationManager.AppSettings.Get("KeyVaultName");
            string connectionString = KeyVaultProvider.GetSecretAsync(keyVaultName, "PermissionRequestQueueConnectionString").Result;
            string queueName = KeyVaultProvider.GetSecretAsync(keyVaultName, "PermissionRequestQueueName").Result;
            string customerId = KeyVaultProvider.GetSecretAsync(keyVaultName, "LoggerCustomerId").Result;
            string sharedKey = KeyVaultProvider.GetSecretAsync(keyVaultName, "LoggerSharedKey").Result;
            string traceTableName = ConfigurationManager.AppSettings.Get("TraceTableName");

            SetRemoteLogger(customerId, sharedKey, traceTableName);

            logger.LogInfoAsync("1d04b6de-81c9-4aea-bcef-5099483daedb", "Permission request consumer starts working ... ").Wait();

            ServiceBusQueueReceiver<List<PermissionRequest>> receiver = new ServiceBusQueueReceiver<List<PermissionRequest>>(connectionString, queueName);
            receiver.RegisterHandler(Handler);
            Console.ReadKey();
        }

        private static Task Handler(List<PermissionRequest> permissionRequestList, CancellationToken cancellationToken)
        {
            foreach (PermissionRequest permissionRequest in permissionRequestList)
            {
                if (!IsValidCatalog(permissionRequest))
                {
                    continue;
                }
                if (permissionRequest.PermissionType == PermissionType.TorusEligibility)
                {
                    UpdateTorusEligibility(permissionRequest).Wait();
                }
                else
                {
                    logger.LogErrorAsync("", $"{permissionRequest.PermissionType} is not a valid permission Type.").Wait();
                }
            }
            return Task.CompletedTask;
        }

        private static void SetRemoteLogger(string customerId, string sharedKey, string traceTableName)
        {
            if (traceTableName == null)
            {
                logger = LoggerFactory.CreateLogger(customerId, sharedKey);
            }
            else
            {
                logger = LoggerFactory.CreateLogger(customerId, sharedKey, traceTableName);
            }
        }

        private async static Task UpdateTorusEligibility(PermissionRequest permissionRequest)
        {
            await logger.LogInfoAsync("2c4a69bf-9c8b-4597-93ba-64ed57958487", $"{permissionRequest.Operation} {permissionRequest.CatalogId} in Torus for {permissionRequest.ApplicantId} ... ");
            if (permissionRequest.Operation == PermissionOperation.Add)
            {
                await AddToTorusEligibility(permissionRequest);
            }
            else if (permissionRequest.Operation == PermissionOperation.Remove)
            {
                await RemoveFromTorusEligibility(permissionRequest);
            }
        }

        private static async Task AddToTorusEligibility(PermissionRequest permissionRequest)
        {
            HttpResponseMessage response = await consumePermissionRequestProvider.AddToEligibility(permissionRequest);
            if (response.StatusCode == HttpStatusCode.NoContent)
            {
                await logger.LogInfoAsync("9d605915-a1cb-44f4-aa42-9cdbc5ee4df6", $"{permissionRequest.CatalogId} for {permissionRequest.ApplicantId} has been added to Torus.");
                await UpsertEligibilityIntoDb(permissionRequest);
            }
            else
            {
                await HandleRequestException(response, permissionRequest);
            }
        }

        private static async Task RemoveFromTorusEligibility(PermissionRequest permissionRequest)
        {
            HttpResponseMessage response = await consumePermissionRequestProvider.RemoveFromEligibility(permissionRequest);
            if (response.StatusCode == HttpStatusCode.NoContent)
            {
                await logger.LogInfoAsync("940f016e-6222-4193-84d2-c891d4cd3110", $"{permissionRequest.CatalogId} for {permissionRequest.ApplicantId} has been removed from Torus.");
                await RemoveEligibilityFromDb(permissionRequest);
            }
            else
            {
                await HandleRequestException(response, permissionRequest);
            }
        }

        private static async Task RemoveEligibilityFromDb(PermissionRequest permissionRequest)
        {
            await logger.LogInfoAsync("2a4db4bb-7db6-434d-9ea9-c1ff692c2664", $"Remove the {permissionRequest.CatalogId} in {permissionRequest.PermissionType} for {permissionRequest.ApplicantId} from DB ... ");
            Permission permission = consumePermissionRequestProvider.GetPermissionAsync(permissionRequest).Result;
            if (permission == null)
            {
                await logger.LogErrorAsync("8d5492a8-448f-49ed-8fec-f5fe5dbf52cc", $"{permissionRequest.CatalogId} in {permissionRequest.PermissionType} for {permissionRequest.ApplicantId} doesn't exist in DB. ");
                return;
            }
            await consumePermissionRequestProvider.DeleteAsync(permission);
            await logger.LogInfoAsync("fa273824-3466-40c0-9b68-62475bfcb8a0", $"{permissionRequest.CatalogId} in {permissionRequest.PermissionType} for {permissionRequest.ApplicantId} has been removed from DB. ");
        }

        private static async Task UpsertEligibilityIntoDb(PermissionRequest permissionRequest)
        {
            await logger.LogInfoAsync("ce28acd2-d70d-4a1b-9f5b-3db001891101", $"Add the {permissionRequest.CatalogId} in {permissionRequest.PermissionType} for {permissionRequest.ApplicantId} into DB ... ");
            Permission permission = new Permission
            {
                ApplicantId = permissionRequest.ApplicantId,
                CatalogId = permissionRequest.CatalogId,
                PermissionType = permissionRequest.PermissionType,
                Created = DateTime.UtcNow
            };
            await consumePermissionRequestProvider.UpsertAsync(permission);
            await logger.LogInfoAsync("e42e826b-a126-450d-a2fc-8699732d62e3", $"{permissionRequest.CatalogId} in {permissionRequest.PermissionType} for {permissionRequest.ApplicantId} has been added to DB. ");
        }

        private static async Task HandleRequestException(HttpResponseMessage response, PermissionRequest permissionRequest)
        {
            string content = response.Content.ReadAsStringAsync().Result;
            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await logger.LogErrorAsync("9a293c29-5ea1-49f6-82a2-4d1065a60db4", $"Response content: {content}. Request received: {JsonConvert.SerializeObject(permissionRequest)}.");
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                await logger.LogErrorAsync("5a360d3e-50ad-49ca-849e-1cde1883f85c", $"Alias or eligibility is not found. Request received: {JsonConvert.SerializeObject(permissionRequest)}.");
            }
            else
            {
                await logger.LogErrorAsync("08f367a9-0ef8-4427-87f0-15cd89dfe803", $"Response content: {content}. Request received: {JsonConvert.SerializeObject(permissionRequest)}.");
                throw new Exception(content);
            }
        }

        private static bool IsValidCatalog(PermissionRequest permissionRequest)
        {
            Catalog catalog = consumePermissionRequestProvider.GetCatalogAsync(permissionRequest.CatalogId).Result;
            if (catalog == null)
            {
                logger.LogErrorAsync("54c92c51-a563-4b9a-b5b3-fde6aa826ea5", $"{permissionRequest.CatalogId} is not a valid catalog id. Request received: {JsonConvert.SerializeObject(permissionRequest)}.").Wait();
                return false;
            }
            return true;
        }
    }
}
