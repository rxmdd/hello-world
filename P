// ***********************************************************************
// <copyright file="PermissionRequestConsumerProvider.cs" company="Microsoft Corporation">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// ***********************************************************************

namespace IDEAs.DataPlatform.AccessControl.PermissionRequestConsumer.Providers
{
    using IDEAs.DataPlatform.AccessControl.CosmosDBLib;
    using IDEAs.DataPlatform.AccessControl.Model;
    using IDEAs.DataPlatform.TorusLibrary.Providers;
    using System.Net.Http;
    using System.Threading.Tasks;

    class PermissionRequestConsumerProvider : IPermissionRequestConsumerProvider
    {
        private readonly CatalogProvider catalogProvider;
        private readonly EligibilityProvider eligibilityProvider;
        private readonly PermissionProvider permissionProvider;

        public PermissionRequestConsumerProvider()
        {
            this.catalogProvider = CatalogProvider.Instance;
            this.eligibilityProvider = EligibilityProvider.Instance;
            this.permissionProvider = PermissionProvider.Instance;
        }

        public async Task<HttpResponseMessage> RemoveFromEligibility(PermissionRequest permissionRequest)
        {
            string eligibilityDefinitionName = this.catalogProvider.GetByIdAsync(permissionRequest.CatalogId).Result.TagId;
            return await this.eligibilityProvider.RemoveFromEligibility(permissionRequest.ApplicantId, eligibilityDefinitionName);
        }

        public async Task<HttpResponseMessage> AddToEligibility(PermissionRequest permissionRequest)
        {
            string eligibilityDefinitionName = this.catalogProvider.GetByIdAsync(permissionRequest.CatalogId).Result.TagId;
            return await this.eligibilityProvider.AddToEligibility(permissionRequest.ApplicantId, eligibilityDefinitionName);
        }

        public async Task UpsertAsync(Permission permission)
        {
            await this.permissionProvider.UpsertAsync(permission);
        }

        public async Task DeleteAsync(Permission permission)
        {
            await this.permissionProvider.DeleteAsync(permission);
        }

        public async Task<Catalog> GetCatalogAsync(string catalogId)
        {
            return await this.catalogProvider.GetByIdAsync(catalogId);
        }

        public async Task<Permission> GetPermissionAsync(PermissionRequest permissionRequest)
        {
            return await this.permissionProvider.GetPermissionAsync(permissionRequest.CatalogId, permissionRequest.ApplicantId, permissionRequest.PermissionType);
        }
    }
}

